What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, git creates the hidden ".git" directory that
contains the files that keep track of the snapshots of the repository. If you
don't initialize the repository, no changes will be tracked.



How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area contains only the files in the working directory (or a
subdirectory of the working directory) that will be added as a snapshot to the
repository in the next commit. The repository contains all the snapshots created
from the staging area during the project. The working directory contains the
".git" directory as well as other directories and files that may or may not be
tracked.



How can you use the staging area to make sure you have one commit per logical
change?

The staging area allows you to prepare a commit by allowing you to see what
files have changed since the last commit. This allows you verify that all
differences are related to only one logical change.



What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

 - When you want to create multiple versions of a project

 - When you want to attempt a major change that is likely to break things

 - When you want to implement an experimental feature



How do the diagrams help you visualize the branch structure?

Diagrams allow you to understand the branch structure in fractions of a second.
If you have to mentally parse just lines of commits, it can take substantially
longer and is much more prone to error.



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

All of the changes made since two branches diverged are joined together during a
merge. See the above answer for the answer to the second part of this question.



What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

------------------
Automatic merging:
------------------

PROS
 * Faster merges

CONS
 * Reconciling refactorizations of code can be tricky to do automatically

---------------
Manual merging:
---------------

PROS
 * The human intent behind changes can be taken into account

CONS
 * Merging branches with large changes can be highly susceptible to error
 * Slow
